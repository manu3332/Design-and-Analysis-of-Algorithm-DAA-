/*
Given an array of elements. Assume arr[i] represents the size of file i. Write an algorithm and a
program to merge all these files into single file with minimum computation. For given two files
A and B with sizes m and n, computation cost of merging them is O(m+n). (Hint: use greedy
approach)
*/
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int minComputationCost(vector<int>& arr) {
    int n = arr.size();
    priority_queue<int, vector<int>, greater<int>> minHeap;
    
    for (int i = 0; i < n; i++) {
        minHeap.push(arr[i]);
    }
    
    int totalCost = 0;
    
    while (minHeap.size() > 1) {
        int file1 = minHeap.top();
        minHeap.pop();
        int file2 = minHeap.top();
        minHeap.pop();
        
        int mergeCost = file1 + file2;
        totalCost += mergeCost;
        
        minHeap.push(mergeCost);
    }
    
    return totalCost;
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;
    
    vector<int> arr(n);
    cout << "Enter the array elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    int cost = minComputationCost(arr);
    cout << "Minimum computation cost to merge all files: " << cost << endl;
    
    return 0;
}
