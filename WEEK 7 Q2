/*
 Kruskal's algorithm.
 */
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 1e6 - 1;
int root[MAX];
int nodes, edges;
pair<long long, pair<int, int>> p[MAX];

int parent(int a)
{
    while (root[a] != a)
    {
        root[a] = root[root[a]];
        a = root[a];
    }
    return a;
}

void union_find(int a, int b)
{
    int d = parent(a);
    int e = parent(b);
    root[d] = root[e];
}

long long kruskal()
{
    int a, b;
    long long cost, minCost = 0;
    for (int i = 0; i < edges; ++i)
    {
        a = p[i].second.first;
        b = p[i].second.second;
        cost = p[i].first;
        if (parent(a) != parent(b))
        {
            minCost += cost;
            union_find(a, b);
        }
    }
    return minCost;
}

int main()
{
    cout << "Enter the number of vertices: ";
    cin >> nodes;

    int graph[nodes][nodes];
    cout << "Enter the adjacency matrix for the graph:" << endl;
    for (int i = 0; i < nodes; ++i)
    {
        for (int j = 0; j < nodes; ++j)
        {
            cin >> graph[i][j];
        }
    }

    int k = 0;
    for (int i = 0; i < nodes; ++i)
    {
        for (int j = i + 1; j < nodes; ++j)
        {
            if (graph[i][j] != 0)
            {
                p[k] = make_pair(graph[i][j], make_pair(i, j));
                k++;
            }
        }
    }
    edges = k;

    for (int i = 0; i < MAX; ++i)
    {
        root[i] = i;
    }

    sort(p, p + edges);
    long long minCost = kruskal();
    cout << "Minimum cost is: " << minCost << endl;

    return 0;
}
