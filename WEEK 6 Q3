/*
Given a directed graph, design an algorithm and implement it using a program to find whether cycle exists in the graph or not.
*/
#include<bits/stdc++.h>
using namespace std;

bool DFS(vector<vector<int>>& graph, int vertex, vector<bool>& visited, vector<bool>& recStack) {
    visited[vertex] = true;
    recStack[vertex] = true;
    for(int i = 0; i < graph[vertex].size(); i++) {
        if(!visited[graph[vertex][i]] && DFS(graph, graph[vertex][i], visited, recStack))
            return true;
        else if(recStack[graph[vertex][i]])
            return true;
    }
    recStack[vertex] = false;
    return false;
}

bool isCyclic(vector<vector<int>>& graph) {
    vector<bool> visited(graph.size(), false);
    vector<bool> recStack(graph.size(), false);
    for(int i = 0; i < graph.size(); i++) {
        if(!visited[i])
            if(DFS(graph, i, visited, recStack))
                return true;
    }
    return false;
}

int main() {
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;
    vector<vector<int>> graph(n, vector<int>(n, 0));
    cout << "Enter the adjacency matrix:" << endl;
    for(int i = 0; i < n; i++) {
        string s;
        cin >> s;
        for(int j = 0; j < n; j++)
            graph[i][j] = s[j] - '0';
    }
    if(isCyclic(graph))
        cout << "Yes Cycle Exists";
    else
        cout << "No Cycle Exists";
    return 0;
}

